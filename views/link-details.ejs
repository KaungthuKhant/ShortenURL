<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QR Code</title>
    <!-- Tailwind CSS for modern styles -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="link-details-css.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>
<body class="bg-gradient-to-r from-gray-900 to-gray-800 min-h-screen flex items-center justify-center transition-all duration-300">
    <a href="/">
        <img src="/images/SnipItBG2.png" alt="SnipIt Logo" class="logo">
    </a>
    <div id="urlDetailsContainer" class="container mx-auto p-4 bg-gray-800 bg-opacity-90 rounded-lg shadow-lg transition-all duration-300 animate-fade-in">
        <div class="content-wrapper">
            <h1 class="text-2xl font-bold mb-4 text-[#0EA5E9]">URL Details</h1>
            <div class="space-y-2">
                <div class="bg-gray-700 p-2 rounded-md shadow-sm hover:shadow-md transition-shadow duration-300">
                    <p class="text-white mb-2">Full URL:</p>
                    <div>
                        <p id="fullURLUpdateMessage" class="text-red-400 mt-2 hidden"></p>
                        <a id="fullUrlLink" href="<%= fullUrl %>" target="_blank" class="text-[#0EA5E9] hover:text-blue-300 hover:underline transition-colors duration-300"><%= fullUrl %></a>
                        <input id="fullUrlInput" type="text" value="<%= fullUrl %>" class="hidden border border-gray-600 rounded p-1 w-full mt-1 bg-gray-800 text-white">
                        <button id="editFullUrlBtn" class="ml-2 text-[#0EA5E9] hover:text-blue-300 transition-colors duration-300">
                            <i class="fas fa-pencil-alt"></i>
                        </button>
                        <button id="saveFullURLBtn" class="ml-2 text-[#0EA5E9] hover:text-green-300 transition-colors duration-300 hidden">
                            <i class="fas fa-save"></i> Save
                        </button>
                        <button id="cancelFullUrlBtn" class="ml-2 text-red-400 hover:text-red-300 transition-colors duration-300 hidden">
                            <i class="fas fa-times"></i> Cancel
                        </button>
                    </div>
                </div>
                <div class="bg-gray-700 p-2 rounded-md shadow-sm hover:shadow-md transition-shadow duration-300">
                    <p class="text-white mb-2">Short URL:</p>
                    <div>
                        <p id="shortURLUpdateMessage" class="text-red-400 mt-2 hidden"></p>
                        <a id="shortUrlLink" href="<%= shortUrl %>" target="_blank" class="text-[#0EA5E9] hover:text-blue-300 hover:underline transition-colors duration-300"><%= shortUrl %></a>
                        <input id="shortUrlInput" type="text" value="<%= shortUrl.split('/').pop() %>" class="hidden border border-gray-600 rounded p-1 w-full mt-1 bg-gray-800 text-white">
                        <input type="hidden" id="originalShortUrl" value="<%= shortUrl %>">
                        <button id="editShortUrlBtn" class="ml-2 text-[#0EA5E9] hover:text-blue-300 transition-colors duration-300">
                            <i class="fas fa-pencil-alt"></i>
                        </button>
                        <button id="copyUrlBtn" class="ml-2 bg-[#0EA5E9] text-white px-3 py-1 rounded-md hover:bg-[#38BDF8] transition-all duration-300 transform hover:scale-105 active:translate-y-0.5 active:shadow-inner active:bg-[#0284C7] shadow-md">
                            <i class="fas fa-copy"></i> Copy Short Url
                        </button>
                        <button id="saveShortUrlBtn" class="ml-2 text-[#0EA5E9] hover:text-green-300 transition-colors duration-300 hidden">
                            <i class="fas fa-save"></i> Save
                        </button>
                        <button id="cancelShortUrlBtn" class="ml-2 text-red-400 hover:text-red-300 transition-colors duration-300 hidden">
                            <i class="fas fa-times"></i> Cancel
                        </button>
                        <p id="copySuccessMessage" class="text-gray-400 mt-1 animate-fade-in"></p>
                    </div>
                </div>       
                <div class="bg-gray-700 p-2 rounded-md shadow-sm hover:shadow-md transition-shadow duration-300">
                    <div id="expirationDateText">
                        <p class="text-white mb-2">Expiration Date:</p>
                        <div>
                            <span id="expirationDateValue" class="text-white"><%= expirationDate ? new Date(expirationDate).toLocaleString() : 'No expiration date set.' %></span>
                            <button id="editExpirationDateBtn" class="ml-2 text-[#0EA5E9] hover:text-blue-300 transition-colors duration-300">
                                <i class="fas fa-pencil-alt"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div id="expirationDateEdit" class="hidden">
                        <input type="date" id="expirationDateInput" class="border border-gray-600 rounded p-1 bg-gray-800 text-white">
                        <input type="time" id="expirationTimeInput" class="border border-gray-600 rounded p-1 bg-gray-800 text-white ml-2">
                        <button id="saveExpirationDateBtn" class="ml-2 text-[#0EA5E9] hover:text-green-300 transition-colors duration-300">
                            <i class="fas fa-save"></i> Save
                        </button>
                        <button id="cancelExpirationDateBtn" class="ml-2 text-red-400 hover:text-red-300 transition-colors duration-300">
                            <i class="fas fa-times"></i> Cancel
                        </button>
                    </div>
                </div>

                <div class="bg-gray-700 p-2 rounded-md shadow-sm hover:shadow-md transition-shadow duration-300">
                    <p class="text-white mb-2">Password:</p>
                    <div>
                        <input type="password" id="urlPasswordInput" value="<%= password || '' %>" class="border border-gray-600 rounded p-1 bg-gray-800 text-white w-[300px]" <%= password ? '' : 'disabled' %>>
                        <button id="togglePasswordBtn" class="ml-2 text-blue-400 hover:text-blue-300 transition-colors duration-300">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button id="editUrlPasswordBtn" class="ml-2 text-blue-400 hover:text-blue-300 transition-colors duration-300">
                            <i class="fas fa-pencil-alt"></i>
                        </button>
                        <button id="saveUrlPasswordBtn" class="ml-2 text-green-400 hover:text-green-300 transition-colors duration-300 hidden">
                            <i class="fas fa-save"></i> Save
                        </button>
                        <button id="cancelUrlPasswordBtn" class="ml-2 text-red-400 hover:text-red-300 transition-colors duration-300 hidden">
                            <i class="fas fa-times"></i> Cancel
                        </button>
                        <p id="urlPasswordMessage" class="text-gray-400 mt-2 hidden"></p>
                    </div>
                </div>

                <div class="bg-gray-700 p-2 rounded-md shadow-sm hover:shadow-md transition-shadow duration-300">
                    <p class="text-white mb-2">Custom Message:</p>
                    <div>
                        <textarea id="customMessageInput" class="border border-gray-600 rounded p-1 bg-gray-800 text-white w-[300px] h-[60px] resize-none"><%= customMessage || '' %></textarea>
                        <p id="customMessageStatusMessage" class="text-gray-400 mt-2 hidden"></p>
                    </div>
                </div>

                <div class="bg-gray-700 p-2 rounded-md shadow-sm hover:shadow-md transition-shadow duration-300">
                    <p class="text-white mb-2">Redirection Limit:</p>
                    <div>
                        <input type="number" id="redirectionLimitInput" min="1" max="10000" value="<%= redirectionLimit %>" class="border border-gray-600 rounded p-1 bg-gray-800 text-white w-20">
                        <p id="redirectionLimitMessage" class="text-gray-400 mt-2 hidden"></p>
                    </div>
                </div>

                <div class="bg-gray-700 p-2 rounded-md shadow-sm hover:shadow-md transition-shadow duration-300">
                    <p class="text-white mb-2">Notification Settings:</p>
                    <div class="flex items-center">
                        <span class="text-white">Notify Me</span>
                        <label class="switch relative inline-block ml-2">
                            <input type="checkbox" id="notifyToggle" class="sr-only" role="switch" <%= notifyUser ? 'checked' : '' %>>
                            <div class="toggle-switch w-14 h-7 bg-gray-600 rounded-full relative cursor-pointer">
                                <div class="toggle-knob absolute w-5 h-5 bg-white rounded-full shadow-md transform transition-transform duration-300 ease-in-out left-1 top-1"></div>
                            </div>
                        </label>
                        <input type="number" id="notifyHours" min="1" max="168" value="<%= notifyHoursBefore %>" class="w-16 bg-gray-800 text-white border border-gray-600 rounded p-1 ml-2">
                        <span class="text-white ml-2">Hours before the url expires</span>
                    </div>
                    <p id="notifyMessage" class="text-gray-400 mt-2 hidden"></p>
                </div>
                
                
                <div class="bg-gray-700 p-2 rounded-md shadow-sm hover:shadow-md transition-shadow duration-300">
                    <p class="text-white mb-2">Clicks:</p>
                    <div>
                        <span class="text-white"><%= clicks %></span>
                    </div>
                </div>

                <div class="mt-4">
                    <p class="text-white mb-2">QR Code:</p>
                    <div class="flex flex-col items-start">
                        <img id="qrImage" src="<%= qrCode %>" alt="QR Code" class="border-2 border-[#0EA5E9] p-2 rounded-md shadow-lg hover:shadow-xl transition-shadow duration-300" style="max-width: 150px; max-height: 150px;">
                        <button id="copyQrCodeBtn" class="ml-2 mt-2 mb-2 bg-[#0EA5E9] text-white px-3 py-1 rounded-md hover:bg-[#38BDF8] transition-all duration-300 transform hover:scale-105 active:translate-y-0.5 active:shadow-inner active:bg-[#0284C7] shadow-md">
                            Copy QR Code
                        </button>
                        <p id="copyQrSuccessMessage" class="text-green-400 mt-1 animate-fade-in"></p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>

        document.addEventListener('DOMContentLoaded', function() {



            const customMessageInput = document.getElementById('customMessageInput');
            const customMessageStatusMessage = document.getElementById('customMessageStatusMessage');

            // Hide the status message initially
            customMessageStatusMessage.style.display = 'none';

            // Function to update custom message
            const updateCustomMessage = debounce(() => {
                const shortUrl = document.getElementById('shortUrlLink').href;
                const newCustomMessage = customMessageInput.value;

                fetch('/updateCustomMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        shortUrl: shortUrl,
                        newCustomMessage: newCustomMessage
                    }),
                })
                .then(response => response.json())
                .then(data => {
                    customMessageStatusMessage.textContent = data.message;
                    customMessageStatusMessage.style.display = 'block';
                    customMessageStatusMessage.classList.add('animate-fade-in');

                    // Hide the message after 2 seconds
                    setTimeout(() => {
                        customMessageStatusMessage.classList.remove('animate-fade-in');
                        customMessageStatusMessage.classList.add('animate-fade-out');
                        setTimeout(() => {
                            customMessageStatusMessage.style.display = 'none';
                            customMessageStatusMessage.classList.remove('animate-fade-out');
                        }, 300);
                    }, 2000);
                })
                .catch(error => {
                    console.error('Error:', error);
                    customMessageStatusMessage.textContent = 'An error occurred while updating the custom message.';
                    customMessageStatusMessage.style.display = 'block';
                });
            }, 1000);

            // Add event listener to the textarea
            customMessageInput.addEventListener('input', updateCustomMessage);


            const expirationDateInput = document.getElementById('expirationDateInput');
            const expirationTimeInput = document.getElementById('expirationTimeInput');
            const expirationDate = new Date('<%= expirationDate %>');
            const adjustedDate = new Date(expirationDate.getTime() - expirationDate.getTimezoneOffset() * 60000);

            // Set the date value
            expirationDateInput.value = adjustedDate.toISOString().split('T')[0];

            // Set the time value (in local time)
            const hours = expirationDate.getHours().toString().padStart(2, '0');
            const minutes = expirationDate.getMinutes().toString().padStart(2, '0');
            expirationTimeInput.value = `${hours}:${minutes}`;
            
            document.addEventListener('visibilitychange', function() {
                if (!document.hidden) {
                    fetch('/check-session')
                        .then(response => response.json())
                        .then(data => {
                            if (!data.valid) {
                                window.location.href = '/login?timeout=true';
                            }
                        })
                        .catch(err => console.error('Error checking session:', err));
                }
            });

            let notifyTimeout;
            const notifyToggle = document.getElementById('notifyToggle');
            const notifyHours = document.getElementById('notifyHours');
            const notifyMessage = document.getElementById('notifyMessage');

            function debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }

            const updateNotifyUser = debounce(() => {
                const shortUrl = document.getElementById('shortUrlLink').href;
                fetch('/updateNotifyUser', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        shortUrl: shortUrl,
                        notifyUser: notifyToggle.checked,
                        notifyHoursBefore: parseInt(notifyHours.value)
                    }),
                })
                .then(response => response.json())
                .then(data => {
                    notifyMessage.textContent = data.success ? data.message : 'An error occurred. Please try again.';
                    notifyMessage.classList.remove('hidden');
                    clearTimeout(notifyTimeout);
                    notifyTimeout = setTimeout(() => {
                        notifyMessage.classList.add('hidden');
                    }, 3000);
                })
                .catch(error => {
                    console.error('Error:', error);
                    notifyMessage.textContent = 'An error occurred. Please try again.';
                    notifyMessage.classList.remove('hidden');
                    clearTimeout(notifyTimeout);
                    notifyTimeout = setTimeout(() => {
                        notifyMessage.classList.add('hidden');
                    }, 2000);
                });
            }, 1000);

            

            //handle the toggle change
            const toggleSwitch = notifyToggle.nextElementSibling;
            notifyToggle.addEventListener('change', function() {
                updateNotifyUser();
                
                const toggleSwitch = this.nextElementSibling;
                if (this.checked) {
                    toggleSwitch.classList.replace('bg-gray-600', 'bg-green-500');
                } else {
                    toggleSwitch.classList.replace('bg-green-500', 'bg-gray-600');
                }
            });
            notifyHours.addEventListener('change', updateNotifyUser);

            // Handle Redirection Limit update
            const redirectionLimitInput = document.getElementById('redirectionLimitInput');
            const redirectionLimitMessage = document.getElementById('redirectionLimitMessage');

            const updateRedirectionLimit = debounce(() => {
                const shortUrl = document.getElementById('shortUrlLink').href;
                const newRedirectionLimit = redirectionLimitInput.value;

                fetch('/updateRedirectionLimit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        shortUrl: shortUrl,
                        newRedirectionLimit: newRedirectionLimit
                    }),
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        redirectionLimitMessage.textContent = 'Redirection limit updated successfully.';
                    } else {
                        redirectionLimitMessage.textContent = 'Failed to update redirection limit. Please try again.';
                    }
                    redirectionLimitMessage.classList.remove('hidden');
                    setTimeout(() => {
                        redirectionLimitMessage.classList.add('hidden');
                    }, 3000);
                })
                .catch(error => {
                    console.error('Error:', error);
                    redirectionLimitMessage.textContent = 'An error occurred. Please try again.';
                    redirectionLimitMessage.classList.remove('hidden');
                    setTimeout(() => {
                        redirectionLimitMessage.classList.add('hidden');
                    }, 3000);
                });
            }, 1000);

            redirectionLimitInput.addEventListener('change', updateRedirectionLimit);

            // Password management
            const passwordInput = document.getElementById('urlPasswordInput');
            const togglePasswordBtn = document.getElementById('togglePasswordBtn');
            const editBtn = document.getElementById('editUrlPasswordBtn');
            const saveBtn = document.getElementById('saveUrlPasswordBtn');
            const cancelBtn = document.getElementById('cancelUrlPasswordBtn');
            const messageElement = document.getElementById('urlPasswordMessage');

            let originalPassword = passwordInput.value;

            function togglePasswordVisibility() {
                passwordInput.type = passwordInput.type === 'password' ? 'text' : 'password';
                togglePasswordBtn.innerHTML = passwordInput.type === 'password' ? '<i class="fas fa-eye"></i>' : '<i class="fas fa-eye-slash"></i>';
            }

            function enableEditing() {
                passwordInput.disabled = false;
                passwordInput.focus();
                editBtn.classList.add('hidden');
                saveBtn.classList.remove('hidden');
                cancelBtn.classList.remove('hidden');
            }

            function disableEditing() {
                passwordInput.disabled = true;
                editBtn.classList.remove('hidden');
                saveBtn.classList.add('hidden');
                cancelBtn.classList.add('hidden');
            }

            function cancelEditing() {
                passwordInput.value = originalPassword;
                disableEditing();
            }

            async function savePassword() {
                const newPassword = passwordInput.value;
                const shortUrl = document.getElementById('shortUrlLink').href;

                try {
                    const response = await fetch('/updateUrlPassword', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ shortUrl, newPassword }),
                    });

                    const data = await response.json();

                    messageElement.textContent = data.message;
                    messageElement.classList.remove('hidden');

                    if (data.success) {
                        originalPassword = newPassword;
                        disableEditing();
                    }

                    setTimeout(() => {
                        messageElement.classList.add('hidden');
                    }, 3000);
                } catch (error) {
                    console.error('Error updating password:', error);
                    messageElement.textContent = 'An error occurred while updating the password.';
                    messageElement.classList.remove('hidden');
                }
            }

            togglePasswordBtn.addEventListener('click', togglePasswordVisibility);
            editBtn.addEventListener('click', enableEditing);
            cancelBtn.addEventListener('click', cancelEditing);
            saveBtn.addEventListener('click', savePassword);
            
            


            // Handle Copy URL functionality
            document.getElementById('copyUrlBtn').addEventListener('click', function () {
                console.log('Copy URL button clicked');
                
                // Dynamically get the updated short URL from the href attribute
                const shortUrl = document.getElementById('shortUrlLink').href;

                navigator.clipboard.writeText(shortUrl).then(() => {
                    const message = document.getElementById('copySuccessMessage');
                    message.textContent = 'Short URL copied to clipboard!';
                    message.classList.add('animate-fade-in');
                    setTimeout(() => {
                        message.classList.remove('animate-fade-in');
                        message.textContent = '';
                    }, 2000);
                }).catch(err => {
                    console.error('Error copying short URL:', err);
                });
            });

            document.getElementById('editExpirationDateBtn').addEventListener('click', function() {
                document.getElementById('expirationDateText').classList.add('hidden');
                document.getElementById('expirationDateEdit').classList.remove('hidden');
            });

            document.getElementById('saveExpirationDateBtn').addEventListener('click', function() {
                const date = document.getElementById('expirationDateInput').value;
                const time = document.getElementById('expirationTimeInput').value;
                const shortUrl = document.getElementById('shortUrlLink').href;

                if (date && time) {
                    fetch('/updateExpirationDate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ shortUrl, date, time }),
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const newDate = new Date(`${date}T${time}`);
                            document.getElementById('expirationDateValue').textContent = newDate.toLocaleString();
                            document.getElementById('expirationDateEdit').classList.add('hidden');
                            document.getElementById('expirationDateText').classList.remove('hidden');
                            document.getElementById('expirationDateEdit').classList.add('hidden');
                        } else {
                            console.error('Failed to update expiration date');
                        }
                    })
                    .catch((error) => {
                        console.error('Error:', error);
                    });
                } else {
                    console.error('Date and time must be provided');
                    // Optionally, you can display an error message to the user here
                }
            });

            document.getElementById('cancelExpirationDateBtn').addEventListener('click', function() {
                document.getElementById('expirationDateText').classList.remove('hidden');
                document.getElementById('expirationDateEdit').classList.add('hidden');
            });


            // Handle Edit Full URL functionality
            document.getElementById('editFullUrlBtn').addEventListener('click', function () {
                console.log("Edit Full URL button clicked");
                document.getElementById('fullUrlLink').classList.add('hidden');
                document.getElementById('fullUrlInput').classList.remove('hidden');
                document.getElementById('editFullUrlBtn').classList.add('hidden');
                document.getElementById('saveFullURLBtn').classList.remove('hidden');
                document.getElementById('cancelFullUrlBtn').classList.remove('hidden');
                console.log("Save Full URL button should now be visible");
            });

            // Handle Cancel Full URL functionality
            document.getElementById('cancelFullUrlBtn').addEventListener('click', function () {
                document.getElementById('fullUrlInput').value = "<%= fullUrl %>";
                document.getElementById('fullUrlLink').classList.remove('hidden');
                document.getElementById('fullUrlInput').classList.add('hidden');
                document.getElementById('editFullUrlBtn').classList.remove('hidden');
                document.getElementById('saveFullURLBtn').classList.add('hidden');
                document.getElementById('cancelFullUrlBtn').classList.add('hidden');
            });

            // Handle Edit Short URL functionality
            document.getElementById('editShortUrlBtn').addEventListener('click', function () {
                document.getElementById('shortUrlLink').classList.add('hidden');
                document.getElementById('shortUrlInput').classList.remove('hidden');
                document.getElementById('editShortUrlBtn').classList.add('hidden');
                document.getElementById('saveShortUrlBtn').classList.remove('hidden');
                document.getElementById('cancelShortUrlBtn').classList.remove('hidden');
            });

            // Handle Cancel Short URL functionality
            document.getElementById('cancelShortUrlBtn').addEventListener('click', function () {
                document.getElementById('shortUrlInput').value = "<%= shortUrl.split('/').pop() %>";
                document.getElementById('shortUrlLink').classList.remove('hidden');
                document.getElementById('shortUrlInput').classList.add('hidden');
                document.getElementById('editShortUrlBtn').classList.remove('hidden');
                document.getElementById('saveShortUrlBtn').classList.add('hidden');
                document.getElementById('cancelShortUrlBtn').classList.add('hidden');
            });

            // Handle Save Full URLs functionality
            document.getElementById('saveFullURLBtn').addEventListener('click', function () {
                console.log("Save Full URL button clicked");
                const updatedFullUrl = document.getElementById('fullUrlInput').value;
                const originalShortUrl = document.getElementById('originalShortUrl').value;
                    
                fetch('/updateFullURL', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ fullUrl: updatedFullUrl, shortUrl: originalShortUrl})
                }).then(response => {
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        document.getElementById('fullUrlLink').textContent = updatedFullUrl;
                        document.getElementById('fullUrlLink').href = updatedFullUrl;
                        document.getElementById('fullUrlLink').classList.remove('hidden');
                        document.getElementById('fullUrlInput').classList.add('hidden');
                        document.getElementById('shortUrlLink').classList.remove('hidden');
                        document.getElementById('shortUrlInput').classList.add('hidden');
                        document.getElementById('editFullUrlBtn').classList.remove('hidden');
                        document.getElementById('editShortUrlBtn').classList.remove('hidden');
                        document.getElementById('saveFullURLBtn').classList.add('hidden');
                        document.getElementById('cancelFullUrlBtn').classList.add('hidden');
                        document.getElementById('fullURLUpdateMessage').classList.add('hidden');

                        // Update QR code
                        const qrImage = document.getElementById('qrImage');
                        qrImage.src = data.qrCode;

                        // Set flag in local storage after successful update
                        // This flag is used to trigger an update of the URL table on the main page
                        // When the user navigates back to the main page, it will check for this flag
                        // and refresh the table data if the flag is set to 'true'
                        localStorage.setItem('urlUpdated', 'true');
                    }
                    else {
                        console.log('Failed to update full URL. Message:', data.message);
                        const message = document.getElementById('fullURLUpdateMessage');
                        message.textContent = data.message;
                        message.classList.remove('hidden'); 
                        // Hide the error message after 3 seconds
                        setTimeout(() => {
                            const message = document.getElementById('fullURLUpdateMessage');
                            message.classList.add('hidden');
                        }, 3000);
                    }
                }).catch(err => console.error('Error updating URLs:', err));
            });

            // Handle Save Short URL functionality
            document.getElementById('saveShortUrlBtn').addEventListener('click', function () {
                const originalShortUrl = document.getElementById('originalShortUrl').value;
                const baseUrl = originalShortUrl.substring(0, originalShortUrl.lastIndexOf('/') + 1);
                const updatedShortUrl = baseUrl + document.getElementById('shortUrlInput').value;

                fetch('/updateShortUrl', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ shortUrl: updatedShortUrl, originalShortUrl: originalShortUrl })
                }).then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('shortUrlLink').textContent = updatedShortUrl;
                        document.getElementById('shortUrlLink').href = updatedShortUrl;
                        document.getElementById('shortUrlLink').classList.remove('hidden');
                        document.getElementById('shortUrlInput').classList.add('hidden');
                        document.getElementById('editShortUrlBtn').classList.remove('hidden');
                        document.getElementById('saveShortUrlBtn').classList.add('hidden');
                        document.getElementById('originalShortUrl').value = updatedShortUrl;
                        document.getElementById('cancelShortUrlBtn').classList.add('hidden');
                        document.getElementById('shortURLUpdateMessage').classList.add('hidden');

                        // Set flag in local storage after successful update
                        // This flag is used to trigger an update of the URL table on the main page
                        // When the user navigates back to the main page, it will check for this flag
                        // and refresh the table data if the flag is set to 'true'
                        localStorage.setItem('urlUpdated', 'true');
                    }
                    else {
                        const message = document.getElementById('shortURLUpdateMessage');
                        message.textContent = data.message;
                        message.classList.remove('hidden');

                        // Hide the error message after 3 seconds
                        setTimeout(() => {
                            const message = document.getElementById('shortURLUpdateMessage');
                            message.classList.add('hidden');
                        }, 3000);
                    }
                }).catch(err => console.error('Error updating short URL:', err));
            });

            // Handle Copy QR Code functionality
            document.getElementById('copyQrCodeBtn').addEventListener('click', function () {
                const qrImage = document.getElementById('qrImage');
                const canvas = document.createElement('canvas');
                const context = canvas.getContext('2d');
                canvas.width = qrImage.naturalWidth;
                canvas.height = qrImage.naturalHeight;
                context.drawImage(qrImage, 0, 0);
                canvas.toBlob(function (blob) {
                    const item = new ClipboardItem({ 'image/png': blob });
                    navigator.clipboard.write([item]).then(() => {
                        const message = document.getElementById('copyQrSuccessMessage');
                        message.textContent = 'QR code copied to clipboard!';
                        message.classList.add('animate-fade-in');
                        setTimeout(() => {
                            message.classList.remove('animate-fade-in');
                            message.textContent = '';
                        }, 2000);
                    }).catch(err => {
                        console.error('Error copying QR code:', err);
                    });
                });
            });
        });
    </script>
</body>
</html>
